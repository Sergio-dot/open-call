{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
        <!-- Bootstrap -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
              integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD"
              crossorigin="anonymous">
        <!-- Font Awesome -->
        <link rel="stylesheet"
              href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
        <!-- Notie -->
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        {{block "css" .}}

        {{end}}
    </head>
    <body>

    {{block "content" .}}

    {{end}}


    {{block "js" .}}

    {{end}}
    <!-- Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
            crossorigin="anonymous"></script>
    <!-- Notie -->
    <script src="https://unpkg.com/notie"></script>
    <!-- Sweet Alert 2 -->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Custom -->
    <script>
        // Used to access to the Prompt() functions
        let attention = Prompt();

        // Handles client-side form validation
        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation');

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    form.classList.add('was-validated');
                }, false);
            })
        })();

        // Module that stores different functions to prompt information to the user's attention like
        // alerts, notifications and custom popup dialogs.
        function Prompt() {
            /* Prompts a toast with the specified properties.
             *
             * Params:
             *
             * title: string - default '' (empty string)
             *
             * icon: ['success', 'error', 'warning', 'info', 'question'] - default 'success'
             *
             * position: ['top', 'top-start', 'top-end', 'center', 'center-start', 'center-end', 'bottom', 'bottom-start', 'bottom-end'] - default 'top-end'
             *
             * showConfirmButton: bool - default 'false'
             *
             * timer: int - default 3000
             *
             * timerProgressBar: bool - default 'true'
             */
            let toast = function (c) {
                const {
                    title = "",
                    icon = "success",
                    position = "top-end",
                    showConfirmButton = false,
                    timer = 3000,
                    timerProgressBar = true,
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: title,
                    position: position,
                    icon: icon,
                    showConfirmButton: showConfirmButton,
                    timer: timer,
                    timerProgressBar: timerProgressBar,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            /* Prompts a modal with specified properties.
             *
             * icon: ['success', 'error', 'warning', 'info', 'question'] - default 'success'
             *
             * text: string - default "" (empty string)
             *
             * title: string - default "" (empty string)
             *
             * footer: string - default "" (empty string)
             *
             * confirmButtonText: string - default "Confirm"
             *
             * showCancelButton: bool - default "false"
             */
            let modal = function (c) {
                const {
                    icon = "success",
                    text = "",
                    title = "",
                    footer = "",
                    confirmButtonText = "Confirm",
                    showCancelButton = "false"
                } = c;

                Swal.fire({
                    title: title,
                    html: text,
                    icon: icon,
                    footer: footer,
                    confirmButtonText: confirmButtonText,
                    showCancelButton: showCancelButton,
                })
            }

            return {
                toast: toast,
                modal: modal,
            }
        }

        function toast(msg, msgType) {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({
                icon: msgType,
                title: msg
            })
        }

        function notify(msg, msgType) {
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

        {{with .Toast}}
        toast("{{.}}", "success")
        {{end}}

        {{with .Error}}
        notify("{{.}}", "error")
        {{end}}

        {{with .Flash}}
        notify("{{.}}", "success")
        {{end}}

        {{with .Warning}}
        notify("{{.}}", "warning")
        {{end}}
    </script>
    </body>
    </html>
{{end}}